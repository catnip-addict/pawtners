//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Actions"",
    ""maps"": [
        {
            ""name"": ""Walking"",
            ""id"": ""986381c4-56c9-41d2-be12-f9995d0d0f3e"",
            ""actions"": [
                {
                    ""name"": ""Chodzenie"",
                    ""type"": ""Value"",
                    ""id"": ""cec08518-2c5a-4171-9560-3f7033bf14ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skok"",
                    ""type"": ""Button"",
                    ""id"": ""eb3fa20a-7d4b-4ebe-b79f-adc849e3455d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kamera"",
                    ""type"": ""Value"",
                    ""id"": ""c0788b3c-677f-4756-8e6b-27411b260f20"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""9e3fb60c-b7cb-46ca-855b-9648a6f5ac5a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""106d7b16-82ab-47b8-8c36-756550b23098"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5fe190e1-e84a-42e0-8994-785e924f10fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c804332f-4d35-4aaf-bcf2-ad2420c254d4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9fa27e65-9c08-4f81-946d-7bbb34025aed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47a310e3-d71c-43ea-9ca7-d3dbe56c8c6d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skok"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""12f31773-c6ba-4e29-8c17-4cdbb465e5d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""92b55bfa-d69b-4cb2-82b0-b3f6249c04b5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9f35cba4-1c3f-47fc-a7a2-09d344f35efa"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0e0a609b-673d-4405-bc00-16717f513de0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df4841c2-81a6-4b76-bfcc-aff6d7cfebf1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Walking
        m_Walking = asset.FindActionMap("Walking", throwIfNotFound: true);
        m_Walking_Chodzenie = m_Walking.FindAction("Chodzenie", throwIfNotFound: true);
        m_Walking_Skok = m_Walking.FindAction("Skok", throwIfNotFound: true);
        m_Walking_Kamera = m_Walking.FindAction("Kamera", throwIfNotFound: true);
    }

    ~@Input_Actions()
    {
        UnityEngine.Debug.Assert(!m_Walking.enabled, "This will cause a leak and performance issues, Input_Actions.Walking.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Walking
    private readonly InputActionMap m_Walking;
    private List<IWalkingActions> m_WalkingActionsCallbackInterfaces = new List<IWalkingActions>();
    private readonly InputAction m_Walking_Chodzenie;
    private readonly InputAction m_Walking_Skok;
    private readonly InputAction m_Walking_Kamera;
    public struct WalkingActions
    {
        private @Input_Actions m_Wrapper;
        public WalkingActions(@Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Chodzenie => m_Wrapper.m_Walking_Chodzenie;
        public InputAction @Skok => m_Wrapper.m_Walking_Skok;
        public InputAction @Kamera => m_Wrapper.m_Walking_Kamera;
        public InputActionMap Get() { return m_Wrapper.m_Walking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkingActions set) { return set.Get(); }
        public void AddCallbacks(IWalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_WalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Add(instance);
            @Chodzenie.started += instance.OnChodzenie;
            @Chodzenie.performed += instance.OnChodzenie;
            @Chodzenie.canceled += instance.OnChodzenie;
            @Skok.started += instance.OnSkok;
            @Skok.performed += instance.OnSkok;
            @Skok.canceled += instance.OnSkok;
            @Kamera.started += instance.OnKamera;
            @Kamera.performed += instance.OnKamera;
            @Kamera.canceled += instance.OnKamera;
        }

        private void UnregisterCallbacks(IWalkingActions instance)
        {
            @Chodzenie.started -= instance.OnChodzenie;
            @Chodzenie.performed -= instance.OnChodzenie;
            @Chodzenie.canceled -= instance.OnChodzenie;
            @Skok.started -= instance.OnSkok;
            @Skok.performed -= instance.OnSkok;
            @Skok.canceled -= instance.OnSkok;
            @Kamera.started -= instance.OnKamera;
            @Kamera.performed -= instance.OnKamera;
            @Kamera.canceled -= instance.OnKamera;
        }

        public void RemoveCallbacks(IWalkingActions instance)
        {
            if (m_Wrapper.m_WalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_WalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WalkingActions @Walking => new WalkingActions(this);
    public interface IWalkingActions
    {
        void OnChodzenie(InputAction.CallbackContext context);
        void OnSkok(InputAction.CallbackContext context);
        void OnKamera(InputAction.CallbackContext context);
    }
}
