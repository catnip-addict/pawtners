//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Actions"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""986381c4-56c9-41d2-be12-f9995d0d0f3e"",
            ""actions"": [
                {
                    ""name"": ""Chodzenie"",
                    ""type"": ""Value"",
                    ""id"": ""cec08518-2c5a-4171-9560-3f7033bf14ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skok"",
                    ""type"": ""Button"",
                    ""id"": ""eb3fa20a-7d4b-4ebe-b79f-adc849e3455d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kamera"",
                    ""type"": ""Value"",
                    ""id"": ""c0788b3c-677f-4756-8e6b-27411b260f20"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""e5ede9b0-22d2-410e-a4a3-297991c7a6b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""9e3fb60c-b7cb-46ca-855b-9648a6f5ac5a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""106d7b16-82ab-47b8-8c36-756550b23098"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5fe190e1-e84a-42e0-8994-785e924f10fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c804332f-4d35-4aaf-bcf2-ad2420c254d4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9fa27e65-9c08-4f81-946d-7bbb34025aed"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47a310e3-d71c-43ea-9ca7-d3dbe56c8c6d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Skok"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78f61611-ce8d-4d7a-a532-cc848f90cc34"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""641ffd4b-5267-46a9-9ea9-15e98f84fd2f"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Joystick"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12144cd4-ec2b-4747-b6ac-87a0eb449953"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""id"": ""c2787e4f-383a-49ac-9a02-315aef74e605"",
            ""actions"": [
                {
                    ""name"": ""Chodzenie"",
                    ""type"": ""Value"",
                    ""id"": ""72d978d1-3358-464a-b52d-8e01bde8d379"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skok"",
                    ""type"": ""Button"",
                    ""id"": ""f440999f-e56c-4578-966c-fe50ef92c287"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kamera"",
                    ""type"": ""Value"",
                    ""id"": ""b4e2deb5-6c30-47a6-b256-659928fe2414"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""2316b99b-1f6e-4d49-82ff-a1be229948d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96fdb5e1-2022-435f-9ca8-d73966b86de2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Joystick"",
                    ""action"": ""Chodzenie"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59467f2c-c6e2-4d71-b5ec-7955cc55720f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Joystick"",
                    ""action"": ""Skok"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c571a855-93f0-48f6-a4d4-050044ec8675"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad;Joystick"",
                    ""action"": ""Kamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44818014-82b8-43fb-9506-deb14966464b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Joystick"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4d87804-9810-4aec-a760-06dd3d05a496"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Chodzenie = m_Keyboard.FindAction("Chodzenie", throwIfNotFound: true);
        m_Keyboard_Skok = m_Keyboard.FindAction("Skok", throwIfNotFound: true);
        m_Keyboard_Kamera = m_Keyboard.FindAction("Kamera", throwIfNotFound: true);
        m_Keyboard_Join = m_Keyboard.FindAction("Join", throwIfNotFound: true);
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Chodzenie = m_Controller.FindAction("Chodzenie", throwIfNotFound: true);
        m_Controller_Skok = m_Controller.FindAction("Skok", throwIfNotFound: true);
        m_Controller_Kamera = m_Controller.FindAction("Kamera", throwIfNotFound: true);
        m_Controller_Join = m_Controller.FindAction("Join", throwIfNotFound: true);
    }

    ~@Input_Actions()
    {
        UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, Input_Actions.Keyboard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller.enabled, "This will cause a leak and performance issues, Input_Actions.Controller.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Chodzenie;
    private readonly InputAction m_Keyboard_Skok;
    private readonly InputAction m_Keyboard_Kamera;
    private readonly InputAction m_Keyboard_Join;
    public struct KeyboardActions
    {
        private @Input_Actions m_Wrapper;
        public KeyboardActions(@Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Chodzenie => m_Wrapper.m_Keyboard_Chodzenie;
        public InputAction @Skok => m_Wrapper.m_Keyboard_Skok;
        public InputAction @Kamera => m_Wrapper.m_Keyboard_Kamera;
        public InputAction @Join => m_Wrapper.m_Keyboard_Join;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Chodzenie.started += instance.OnChodzenie;
            @Chodzenie.performed += instance.OnChodzenie;
            @Chodzenie.canceled += instance.OnChodzenie;
            @Skok.started += instance.OnSkok;
            @Skok.performed += instance.OnSkok;
            @Skok.canceled += instance.OnSkok;
            @Kamera.started += instance.OnKamera;
            @Kamera.performed += instance.OnKamera;
            @Kamera.canceled += instance.OnKamera;
            @Join.started += instance.OnJoin;
            @Join.performed += instance.OnJoin;
            @Join.canceled += instance.OnJoin;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Chodzenie.started -= instance.OnChodzenie;
            @Chodzenie.performed -= instance.OnChodzenie;
            @Chodzenie.canceled -= instance.OnChodzenie;
            @Skok.started -= instance.OnSkok;
            @Skok.performed -= instance.OnSkok;
            @Skok.canceled -= instance.OnSkok;
            @Kamera.started -= instance.OnKamera;
            @Kamera.performed -= instance.OnKamera;
            @Kamera.canceled -= instance.OnKamera;
            @Join.started -= instance.OnJoin;
            @Join.performed -= instance.OnJoin;
            @Join.canceled -= instance.OnJoin;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // Controller
    private readonly InputActionMap m_Controller;
    private List<IControllerActions> m_ControllerActionsCallbackInterfaces = new List<IControllerActions>();
    private readonly InputAction m_Controller_Chodzenie;
    private readonly InputAction m_Controller_Skok;
    private readonly InputAction m_Controller_Kamera;
    private readonly InputAction m_Controller_Join;
    public struct ControllerActions
    {
        private @Input_Actions m_Wrapper;
        public ControllerActions(@Input_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Chodzenie => m_Wrapper.m_Controller_Chodzenie;
        public InputAction @Skok => m_Wrapper.m_Controller_Skok;
        public InputAction @Kamera => m_Wrapper.m_Controller_Kamera;
        public InputAction @Join => m_Wrapper.m_Controller_Join;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Add(instance);
            @Chodzenie.started += instance.OnChodzenie;
            @Chodzenie.performed += instance.OnChodzenie;
            @Chodzenie.canceled += instance.OnChodzenie;
            @Skok.started += instance.OnSkok;
            @Skok.performed += instance.OnSkok;
            @Skok.canceled += instance.OnSkok;
            @Kamera.started += instance.OnKamera;
            @Kamera.performed += instance.OnKamera;
            @Kamera.canceled += instance.OnKamera;
            @Join.started += instance.OnJoin;
            @Join.performed += instance.OnJoin;
            @Join.canceled += instance.OnJoin;
        }

        private void UnregisterCallbacks(IControllerActions instance)
        {
            @Chodzenie.started -= instance.OnChodzenie;
            @Chodzenie.performed -= instance.OnChodzenie;
            @Chodzenie.canceled -= instance.OnChodzenie;
            @Skok.started -= instance.OnSkok;
            @Skok.performed -= instance.OnSkok;
            @Skok.canceled -= instance.OnSkok;
            @Kamera.started -= instance.OnKamera;
            @Kamera.performed -= instance.OnKamera;
            @Kamera.canceled -= instance.OnKamera;
            @Join.started -= instance.OnJoin;
            @Join.performed -= instance.OnJoin;
            @Join.canceled -= instance.OnJoin;
        }

        public void RemoveCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    public interface IKeyboardActions
    {
        void OnChodzenie(InputAction.CallbackContext context);
        void OnSkok(InputAction.CallbackContext context);
        void OnKamera(InputAction.CallbackContext context);
        void OnJoin(InputAction.CallbackContext context);
    }
    public interface IControllerActions
    {
        void OnChodzenie(InputAction.CallbackContext context);
        void OnSkok(InputAction.CallbackContext context);
        void OnKamera(InputAction.CallbackContext context);
        void OnJoin(InputAction.CallbackContext context);
    }
}
